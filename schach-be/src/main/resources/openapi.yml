openapi: 3.0.1
info:
  title: Schachfish-Api
  description: Schachfish is a chess engine for making/querying moves and board evaluations
  version: 0.0.2
servers:
  - url: http://localhost:9101/api
tags:
- name: move
  description: legal moves
- name: evaluation
  description: value of board state
- name: board
  description: state of boards in session
- name: user
  description: user management
- name: lobby
  description: info about current games
- name: health
  description: basic health status info

paths:
  /board/create:
    post:
      tags:
      - board
      summary: create a board
      operationId: createBoardFromType
      parameters: 
      - in: query
        required: true
        name: gameType
        schema:
          $ref: '#/components/schemas/GameType'
      responses:
        200:
          description: message
          content:
            'application/json':
              schema:
                type: string
      
  /board/{boardId}:
    get:
      tags:
      - board
      summary: get board state
      operationId: getBoard
      parameters: 
      - name: boardId
        in: path
        description: id of the board to get
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: get all boards successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BoardStateDto'
        400:
          description: get cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
    delete:
      tags:
      - board
      summary: delete a board
      operationId: deleteBoard
      parameters: 
      - name: boardId
        in: path
        description: id of the board to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: board deleted successfully
          content:
            'application/json':
              schema:
                type: string
                description: message
        400:
          description: delete cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        404:
          description: board not found
          content:
            'application/json':
              schema:
                type: string
                description: message
      
  /board/allIds:
    get:
      tags:
      - board
      summary: get all board ids
      operationId: getAllBoardIds
      security: 
      - basicAuth: []
      responses:
        200:
          description: get all boards ids successfully
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: integer
                  format: int64
        400:
          description: get cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        401:
          $ref: '#/components/responses/UnauthorizedError'
          
  /board/state/{username}/create:
    post:
      tags: 
      - board
      summary: add a board state
      operationId: addBoardStateForUser
      security: 
      - basicAuth: []
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
        description: id of user whose board states to add to
      requestBody:
        description: boardState information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BoardStateDto'
      responses:
        200:
          description: successfully added a boardstate
          content:
            'application/json':
              schema:
                type: integer
                format: int64
        400:
          description: board not successfully added
          content:
            'application/json':
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
      x-codegen-request-body-name: boardStateDto

  /board/state/{username}:
    get:
      tags: 
      - board
      summary: get all board states for user
      operationId: getBoardStatesForUser
      security: 
      - basicAuth: []
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: id of user whose board states to get
      responses:
        200:
          description: successfully get all boardstates
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardStateDto'
        400:
          description: board not successfully added
          content:
            'application/json':
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /moves/{boardId}:
    get:
      tags:
      - move
      summary: get list of legal moves from boardId
      operationId: getLegalMovesFromBoardId
      parameters:
      - name: boardId
        in: path
        description: id of board to get
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: list of legal moves
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoveCollectionDto'
        404:
          description: board not found
          content:
            'application/json':
              schema:
                type: string
                description: message

    post:
      tags:
      - move
      summary: makes move on board
      operationId: makeMove
      parameters: 
      - name: boardId
        in: path
        description: id of the board
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: list of pieces and positions / castling information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MoveCollectionDto'
        required: true
      x-codegen-request-body-name: boardStateDto
      responses:
        200:
          description: move made successfully
          content:
            'application/json':
              schema:
                type: string
                description: message
        400:
          description: move cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        404:
          description: board not found
          content:
            'application/json':
              schema:
                type: string
                description: message

  /evaluate:
    post:
      tags:
      - evaluation
      summary: get an evaluation of the board
      operationId: getBoardEvaluation
      security: 
      - basicAuth: []
      requestBody:
        description: list of pieces and positions / castling information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BoardStateDto'
        required: true
      responses:
        200:
          description: board evaluation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BoardEvaluationDto'
      x-codegen-request-body-name: boardStateDto
  
  /health/up:
    get:
      tags: 
      - health
      summary: is this application live
      operationId: amIAlive
      responses:
        200:
          description: application is running
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/MessageDto'
                
  /user/new/register:
    post:
      tags: 
      - user
      summary: register a new user
      operationId: registerNewUser
      requestBody:
        description: new user information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewUserDto'
      responses:
        200:
          description: successfully created a new user
          content:
            'application/json':
              schema:
                type: boolean
        400:
          description: user not successfully created
          content:
            'application/json':
              schema:
                type: string
        403:
          $ref: '#/components/responses/UsernameExistsError'
      x-codegen-request-body-name: newUserDto
      
  /user/exists/{username}:
    get:
      tags: 
      - user
      summary: check if a user exists by username
      operationId: getUserExists
      security: 
      - basicAuth: []
      parameters: 
      - name: username
        in: path
        description: username to check
        required: true
        schema:
          type: string
      responses:
        200:
          description: response whether user exists
          content:
            'application/json':
              schema:
                type: boolean
        400:
          description: user not successfully searched
          content:
            'application/json':
              schema:
                type: string
  
  /user/admin/getAllUsers:
    get:
      tags: 
      - user
      summary: get all users
      operationId: getAllUsers
      security: 
      - basicAuth: []
      responses:
        200:
          description: list of all users
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        400:
          description: failed to get users
          content:
            'application/json':
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
  
  /user/admin/updateUserRoles/{username}:
    post:
      tags:
      - user
      summary: update the roles of a user
      operationId: updateUserRoles
      security:
      - basicAuth: []
      parameters: 
      - name: username
        in: path
        description: username of user to be updated
        required: true
        schema:
          type: string
      - name: append
        in: query
        description: whether to append the roles
        required: true
        schema:
          type: boolean
      x-codegen-request-body-name: userRoles
      requestBody:
        description: list of user roles
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
      responses:
        200:
          description: successfully updated user roles
          content:
            'application/json':
              schema:
                type: string
        400:
          description: failure to update user roles
          content:
            'application/json':
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
  
  /lobby/{gameType}/games:
    get:
      tags:
      - lobby
      summary: get all board ids
      operationId: getAllGamesInLobby
      security: 
      - basicAuth: []
      parameters: 
      - name: gameType
        in: path
        description: type of game
        required: true
        schema: 
          $ref: '#/components/schemas/GameType'
      responses:
        200:
          description: get all boards ids successfully
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameInfoDto'
        400:
          description: get cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        401:
          $ref: '#/components/responses/UnauthorizedError'
  
  /lobby/{gameType}/create:
    post:
      tags: 
      - lobby
      summary: create a game
      operationId: createGame
      security: 
      - basicAuth: []
      parameters: 
      - name: gameType
        in: path
        description: type of game
        required: true
        schema:
          $ref: '#/components/schemas/GameType'
      requestBody:
        description: new game information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateGameDto'
      responses:
        200:
          description: create game successfully
          content:
            'application/json':
              schema:
                type: boolean
        400:
          description: create cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        401:
          $ref: '#/components/responses/UnauthorizedError'
      x-codegen-request-body-name: CreateGameDto
  
  /lobby/{gameType}/join/{gameId}:
    post:
      tags:
      - lobby
      summary: join game
      operationId: joinGame
      security: 
      - basicAuth: []
      parameters: 
      - name: gameType
        in: path
        description: type of game
        required: true
        schema: 
          $ref: '#/components/schemas/GameType'
      - name: gameId
        in: path
        description: type of game
        required: true
        schema: 
          type: integer
          format: int64
      requestBody:
        description: new game information
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/JoinGameDto'
      responses:
        200:
          description: join game successfully
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameInfoDto'
        400:
          description: get cannot be processed
          content:
            'application/json':
              schema:
                type: string
                description: message
        401:
          $ref: '#/components/responses/UnauthorizedError'
          
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Auth info is missing or invalid
      headers:
        WWW_Athenticate:
          schema:
            type: string
    UsernameExistsError:
      description: Username already exists
  schemas:
    MessageDto:
      type: object
      properties:
        message:
          type: string
    NewUserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserDto:
      type: object
      properties:
        username:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum: 
      - ADMIN
      - PLAYER
    BoardStateDto:
      type: object
      properties:
        blackStatus:
          $ref: '#/components/schemas/ColourStatusDto'
        whiteStatus:
          $ref: '#/components/schemas/ColourStatusDto'
        turn:
          $ref: '#/components/schemas/Colour'
        history:
          type: array
          items:
            $ref: '#/components/schemas/MoveCollectionDto'
    ColourStatusDto:
      type: object
      properties:
        canCastleKingSide:
          type: boolean
        canCastleQueenSide:
          type: boolean
        pieces:
          type: array
          items:
            $ref: '#/components/schemas/PieceDto'
    EnPassantDto:
      type: object
      properties:
        possible:
          type: boolean
        taken:
          $ref: '#/components/schemas/PositionDto'
    MoveCollectionDto:
      type: object
      properties:
        moves:
          type: array
          items:
            $ref: '#/components/schemas/MoveDto'
    BoardEvaluationDto:
      type: object
      properties:
        score:
          type: number
          format: double
    PieceDto:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PositionDto'
        name:
          $ref: '#/components/schemas/PieceName'
    Colour:
      type: string
      enum:
      - black
      - white
    PieceName:
      type: string
      enum:
      - king
      - queen
      - rook
      - bishop
      - knight
      - pawn
    PositionDto:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
    MoveDto:
      type: object
      properties:
        to:
          $ref: '#/components/schemas/PositionDto'
        from:
          $ref: '#/components/schemas/PositionDto'
        takenPiece:
          $ref: '#/components/schemas/PositionDto'
        promoteTo:
          $ref: '#/components/schemas/PieceName'
    GameType:
      type: string
      enum:
      - standard
    GameInfoDto:
      type: object
      properties:
        gameType:
          $ref: '#/components/schemas/GameType'
        white:
          type: string
        black:
          type: string
        spectators:
          type: array
          items:
            type: string
        gameState:
          $ref: '#/components/schemas/GameState'
    CreateGameDto:
      type: object
      properties:
        gameType:
          $ref: '#/components/schemas/GameType'
        challengerUsername:
          type: string
        challengedUsername:
          type: string
    JoinGameDto:
      type: object
      properties:
        playerType:
          $ref: '#/components/schemas/PlayerType'
    PlayerType:
      type: string
      enum:
      - player
      - spectator
    GameState:
      type: string
      enum:
      - active
      - complete
      - open
      - inactive
        
security: 
- basicAuth: []
